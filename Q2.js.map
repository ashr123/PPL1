{"version":3,"file":"Q2.js","sourceRoot":"","sources":["Q2.ts"],"names":[],"mappings":"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","sourcesContent":["import {map, union} from 'ramda'\n\ninterface BinTree {\n\troot: number;\n\tleft?: BinTree;\n\tright?: BinTree;\n}\n\nlet tree: BinTree = {\n\troot: 5,\n\tleft: {\n\t\troot: -3,\n\t\tleft: {\n\t\t\troot: 23\n\t\t}\n\t},\n\tright: {\n\t\troot: 3,\n\t\tleft: {\n\t\t\troot: 8\n\t\t},\n\t\tright: {\n\t\t\troot: 12\n\t\t}\n\t}\n};\n\nlet Tree2: GBinTree<any> = {\n\troot: true,\n\tleft: {\n\t\troot: 'a',\n\t\tleft: {\n\t\t\troot: 'mayer',\n\t\t\tright: {\n\t\t\t\troot: 'theMargiz'\n\t\t\t}\n\t\t}\n\t},\n\tright: {\n\t\troot: 'b',\n\t\tleft: {\n\t\t\troot: 8\n\t\t}\n\t}\n};\n\nlet TreePreArray: (tree: BinTree) => number[] = tree => {\n\tif (!tree)\n\t\treturn [];\n\treturn union([tree.root], union(TreePreArray(tree.left), TreePreArray(tree.right)));\n};\n\nlet TreeInArray: (tree: BinTree) => number[] = tree => {\n\tif (!tree)\n\t\treturn [];\n\treturn union(TreeInArray(tree.left), union([tree.root], TreeInArray(tree.right)));\n};\n\nlet TreePostArray: (tree: BinTree) => number[] = tree => {\n\tif (!tree)\n\t\treturn [];\n\treturn union(union(TreePostArray(tree.left), TreePostArray(tree.right)), [tree.root]);\n};\n\nconsole.log(TreePreArray(tree));\nconsole.log(TreeInArray(tree));\nconsole.log(TreePostArray(tree));\n\ninterface GBinTree<T> {\n\troot: T;\n\tleft?: GBinTree<T>;\n\tright?: GBinTree<T>;\n}\n\nlet GTreePreArray: <T>(tree: GBinTree<T>) => T[] = tree => {\n\tif (!tree)\n\t\treturn [];\n\treturn union([tree.root], union(GTreePreArray(tree.left), GTreePreArray(tree.right)));\n};\n\nlet GTreeInArray: <T>(tree: GBinTree<T>) => T[] = tree => {\n\tif (!tree)\n\t\treturn [];\n\treturn union(GTreeInArray(tree.left), union([tree.root], GTreeInArray(tree.right)));\n};\n\nlet GTreePostArray: <T>(tree: GBinTree<T>) => T[] = tree => {\n\tif (!tree)\n\t\treturn [];\n\treturn union(union(GTreePostArray(tree.left), GTreePostArray(tree.right)), [tree.root]);\n};\n\nconsole.log(GTreePreArray(Tree2));\nconsole.log(GTreeInArray(Tree2));\nconsole.log(GTreePostArray(Tree2));"]}