{"version":3,"file":"1.3.js","sourceRoot":"","sources":["1.3.ts"],"names":[],"mappings":";;AAAA,iCAAyB;AAEzB,IAAI,EAAE,GAAgC,EAAC,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,EAAC,EAC7D,EAAE,GAAuD,EAAC,QAAQ,EAAE,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,EAAE,EAAC,GAAG,EAAE,EAAE,EAAC,CAAC,EAAC,EAChG,EAAE,GAAwB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAC,CAAC,EACpC,EAAE,GAA4D,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,WAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAEhG,iCAAiC;AACjC,0BAA0B;AAC1B,EAAE;AACF,iCAAiC;AACjC,wBAAwB","sourcesContent":["import {map} from 'ramda'\r\n\r\nlet v1: { name: string, age: number }={name: \"peter\", age: 20},\r\n\tv2: { children: ({ name: string } | { age: number })[] }={children: [{name: \"john\"}, {age: 12}]},\r\n\tv3: (x: number) => number=(x) => x+2,\r\n\tv4: <T, Y>(f: (x: T | Y) => T | Y, l: (T | Y)[]) => (T | Y)[]=(f, l) => map((x) => f(f(x)), l);\r\n\r\n// type T1={ a: number, b: {} }[]\r\n// type T2={ a: number }[]\r\n//\r\n// let check: T2=[{a: 5, b: {}}],\r\n// \tcheck2: T1=[{a: 5}];"]}